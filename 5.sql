-- Create a new database named 'triggers'
CREATE DATABASE triggers;

-- Switch to the 'triggers' database
USE triggers;

-- Show all tables in the current database
SHOW TABLES;

-- Create the 'customer' table with columns for id, age, and name
CREATE TABLE customer (
    id INT AUTO_INCREMENT,    -- Unique customer ID (auto-incremented)
    age INT,                  -- Customer's age
    name VARCHAR(100),        -- Customer's name
    PRIMARY KEY (id)          -- Set 'id' as the primary key
);

-- Insert sample records into the 'customer' table
INSERT INTO customer (age, name)
VALUES
(25, 'John Doe'),
(30, 'Jane Smith'),
(22, 'Mike Johnson'),
(35, 'Emily Davis'),
(28, 'Alex Lee');

-- Verify the inserted data
SELECT * FROM customer;

-- Change delimiter to allow multi-line trigger creation
DELIMITER //

-- Create a trigger to ensure the age is not negative before inserting
CREATE TRIGGER age_verify
BEFORE INSERT ON customer
FOR EACH ROW
BEGIN
    -- If the new age is negative, set it to 0
    IF NEW.age < 0 THEN
        SET NEW.age = 0;
    END IF;
END //

-- Restore the default delimiter
DELIMITER ;

-- Insert new records to test the trigger
INSERT INTO customer (id, age, name) 
VALUES
(6, 25, 'John Doe'),   -- Valid age
(7, -5, 'Jane Smith'), -- Invalid age (trigger sets it to 0)
(8, 30, 'Mike Johnson'),
(9, 15, 'Emily Davis');

-- Verify the inserted data after trigger execution
SELECT * FROM customer;

-- Create the 'customers1' table with name, birthdate, and email
CREATE TABLE customers1 (
    id INT AUTO_INCREMENT,         -- Unique customer ID (auto-incremented)
    name VARCHAR(100),             -- Customer's name
    birthdate DATE,                -- Customer's birthdate
    email VARCHAR(100),            -- Customer's email
    PRIMARY KEY (id)               -- Set 'id' as the primary key
);

-- Create the 'message' table to store user notifications
CREATE TABLE message (
    messageid INT AUTO_INCREMENT, -- Unique message ID (auto-incremented)
    id INT,                       -- ID of the customer
    message TEXT,                 -- Notification message
    PRIMARY KEY (messageid)       -- Set 'messageid' as the primary key
);

-- Change delimiter for the trigger creation
DELIMITER //

-- Create a trigger to notify customers if they haven't provided a birthdate
CREATE TRIGGER check_null_dob
AFTER INSERT
ON customers1
FOR EACH ROW
BEGIN
    -- If birthdate is NULL, insert a reminder message into the 'message' table
    IF NEW.birthdate IS NULL THEN
        INSERT INTO message (id, message)
        VALUES (NEW.id, CONCAT('Hi ', NEW.name, ', please update your birthdate.'));
    END IF;
END //

-- Restore the default delimiter
DELIMITER ;

-- Insert sample records into 'customers1'
INSERT INTO customers1 (name, birthdate, email)
VALUES
('John Adams', '1998-05-15', 'john.adams@example.com'),
('Alice Walker', '1990-08-22', 'alice.walker@example.com'),
('Sam Wilson', '1985-11-30', 'sam.wilson@example.com'),
('Sophia Johnson', '2000-01-01', 'sophia.johnson@example.com');

-- Verify messages generated by the trigger
SELECT * FROM message;

-- Insert sample messages manually
INSERT INTO message (id, message)
VALUES
(1, 'Hello, how are you?'),
(2, 'Good morning!'),
(3, 'Have a great day!'),
(1, 'Let\'s meet at 5 PM');

-- Create the 'employee' table with ID, name, age, and salary
CREATE TABLE employee (
    id INT AUTO_INCREMENT PRIMARY KEY, -- Unique employee ID
    name VARCHAR(100) NOT NULL,        -- Employee name (mandatory)
    age INT CHECK (age >= 18),         -- Employee age (must be 18 or older)
    salary DECIMAL(10,2) NOT NULL      -- Employee salary (decimal format)
);

-- Insert sample records into the 'employee' table
INSERT INTO employee (name, age, salary) 
VALUES 
('Aarav Mehta', 25, 55000.00),
('Neha Sharma', 30, 72000.50),
('Rohan Verma', 28, 60000.75),
('Ishita Patel', 35, 85000.25),
('Vikram Singh', 40, 95000.00);

-- Change delimiter for trigger creation
DELIMITER //

-- Create a trigger to prevent salary updates to exactly 72000
CREATE TRIGGER upd_trigger
BEFORE UPDATE
ON employee
FOR EACH ROW
BEGIN
    -- If the new salary is 72000, raise an error
    IF NEW.salary = 72000 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Salary cannot be exactly 72000!';
    END IF;
END //

-- Restore the default delimiter
DELIMITER ;

-- Attempt to update an employee's salary (will trigger an error if set to 72000)
UPDATE employee
SET salary = 8000;

-- Verify the employee table after update
SELECT * FROM employee;

-- Create the 'salary' table to store employee salaries
CREATE TABLE salary (
    id INT AUTO_INCREMENT PRIMARY KEY, -- Unique salary ID
    valid_from DATE NOT NULL,          -- Date when the salary starts
    amount DECIMAL(10,2) NOT NULL      -- Salary amount (decimal format)
);

-- Insert sample salary records
INSERT INTO salary (valid_from, amount) 
VALUES
('2024-01-01', 50000.00),
('2024-06-01', 60000.00),
('2025-01-01', 75000.00);

-- Verify inserted salary data
SELECT * FROM salary;

-- Create the 'salarydel' table to store deleted salary records
CREATE TABLE salarydel (
    eid INT NOT NULL,                 -- Employee ID (Foreign Key can be added if needed)
    id INT AUTO_INCREMENT PRIMARY KEY, -- Unique salary entry ID
    deleted_at DATETIME,               -- Timestamp of deletion
    valid_from DATE NOT NULL,           -- Start date of the salary
    amount DECIMAL(10,2) NOT NULL       -- Salary amount
);

-- Change delimiter for the trigger
DELIMITER //

-- Create a trigger to archive salary records before deletion
CREATE TRIGGER before_salary_delete
BEFORE DELETE ON salary
FOR EACH ROW
BEGIN
    -- Insert deleted salary details into 'salarydel' table
    INSERT INTO salarydel (id, valid_from, amount, deleted_at)
    VALUES (OLD.id, OLD.valid_from, OLD.amount, NOW());
END //

-- Restore the default delimiter
DELIMITER ;

-- Delete a salary record to test the trigger
DELETE FROM salary WHERE id = 103;

-- Verify that deleted salary details are stored in 'salarydel'
SELECT * FROM salarydel;
